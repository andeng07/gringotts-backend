// <auto-generated />
using System;
using Gringotts.Api.Shared.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gringotts.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gringotts.Api.Features.ManagementAuthentication.Models.ManagementUserSecret", b =>
                {
                    b.Property<Guid>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ManagementUserId")
                        .HasColumnType("uuid");

                    b.HasKey("ReferenceId");

                    b.HasIndex("ManagementUserId")
                        .IsUnique();

                    b.ToTable("UserSecrets");
                });

            modelBuilder.Entity("Gringotts.Api.Features.Log.Models.Log", b =>
                {
                    b.Property<Guid>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("LogType")
                        .HasColumnType("integer");

                    b.Property<Guid>("LogReaderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ManagementUserId")
                        .HasColumnType("uuid");

                    b.HasKey("ReferenceId");

                    b.HasIndex("LogReaderId");

                    b.HasIndex("ManagementUserId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Gringotts.Api.Features.LogReader.Models.Location", b =>
                {
                    b.Property<Guid>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoomName")
                        .HasColumnType("text");

                    b.HasKey("ReferenceId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Gringotts.Api.Features.LogReader.Models.LogReader", b =>
                {
                    b.Property<Guid>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ReferenceId");

                    b.HasIndex("LocationId");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("Gringotts.Api.Features.Statistics.Models.LogReaderAnalytics", b =>
                {
                    b.Property<Guid>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LogReaderId")
                        .HasColumnType("uuid");

                    b.HasKey("ReferenceId");

                    b.HasIndex("LogReaderId")
                        .IsUnique();

                    b.ToTable("LogReaderAnalytics");
                });

            modelBuilder.Entity("Gringotts.Api.Features.Statistics.Models.LogUserAnalytics", b =>
                {
                    b.Property<Guid>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManagementUserId")
                        .HasColumnType("uuid");

                    b.HasKey("ReferenceId");

                    b.HasIndex("ManagementUserId")
                        .IsUnique();

                    b.ToTable("LogUserAnalytics");
                });

            modelBuilder.Entity("Gringotts.Api.Features.LogUser.Models.LogRole", b =>
                {
                    b.Property<Guid>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LogPermission")
                        .HasColumnType("integer");

                    b.HasKey("ReferenceId");

                    b.ToTable("LogRoles");
                });

            modelBuilder.Entity("Gringotts.Api.Features.LogUser.Models.LogUser", b =>
                {
                    b.Property<Guid>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("SchoolId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ReferenceId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Gringotts.Api.Features.LogUser.Models.LogUserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManagementUserId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoleId");

                    b.HasIndex("ManagementUserId");

                    b.ToTable("LogUserRoles");
                });

            modelBuilder.Entity("Gringotts.Api.Features.ManagementAuthentication.Models.ManagementUserSecret", b =>
                {
                    b.HasOne("Gringotts.Api.Features.LogUser.Models.LogUser", null)
                        .WithOne()
                        .HasForeignKey("Gringotts.Api.Features.ManagementAuthentication.Models.ManagementUserSecret", "ManagementUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gringotts.Api.Features.Log.Models.Log", b =>
                {
                    b.HasOne("Gringotts.Api.Features.LogReader.Models.LogReader", null)
                        .WithMany()
                        .HasForeignKey("LogReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gringotts.Api.Features.LogUser.Models.LogUser", null)
                        .WithMany()
                        .HasForeignKey("ManagementUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gringotts.Api.Features.LogReader.Models.LogReader", b =>
                {
                    b.HasOne("Gringotts.Api.Features.LogReader.Models.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gringotts.Api.Features.Statistics.Models.LogReaderAnalytics", b =>
                {
                    b.HasOne("Gringotts.Api.Features.LogReader.Models.LogReader", null)
                        .WithOne()
                        .HasForeignKey("Gringotts.Api.Features.Statistics.Models.LogReaderAnalytics", "LogReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gringotts.Api.Features.Statistics.Models.LogUserAnalytics", b =>
                {
                    b.HasOne("Gringotts.Api.Features.LogUser.Models.LogUser", null)
                        .WithOne()
                        .HasForeignKey("Gringotts.Api.Features.Statistics.Models.LogUserAnalytics", "ManagementUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gringotts.Api.Features.LogUser.Models.LogUserRole", b =>
                {
                    b.HasOne("Gringotts.Api.Features.LogUser.Models.LogRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gringotts.Api.Features.LogUser.Models.LogUser", null)
                        .WithMany()
                        .HasForeignKey("ManagementUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
